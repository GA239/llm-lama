[project.optional-dependencies]
dev = [
    "ipython",


    "black",

    "dotenv-linter",

    "freezegun",
    "mixer",

    "jedi",
    "flake8-absolute-import",
    "flake8-black",
    "flake8-bugbear",
    "flake8-cognitive-complexity",
    "flake8-django",
    "flake8-eradicate",
    "flake8-isort>=4.0.0",
    "flake8-fixme",
    "flake8-pep3101",
    "flake8-pie",
    "flake8-print",
    "flake8-printf-formatting",
    "flake8-pytest",
    "flake8-pytest-style",
    "flake8-simplify",
    "flake8-todo",
    "flake8-use-fstring",
    "flake8-variables-names",
    "flake8-walrus",
    "flake8-pyproject",

]


[tool.flake8]
max-line-length = 160
inline-quotes = "\""
ignore = [
    "B010",  # Do not call setattr(x, 'attr', val), instead use normal property access: x.attr = val
    "DJ01",  # Avoid using null=True on string-based fields such as CharField and TextField
    "E501",  # Line too long
    "E265",  # Block comments should have one space before the pound sign (#) and the comment itself
    "F811",  # Redefinition of unused name from line n
    "FS003",  # f-string missing prefix
    "PIE783",  # Warn about Celery task definitions that don't have explicit names
    "PIE785",  # Celery tasks can bunch up if they don't have expirations
    "PIE801",  # Return boolean expressions directly instead of returning True and False
    "PT001",  # Use @pytest.fixture() over @pytest.fixture
    "SIM102",  # Use a single if-statement instead of nested if-statements
    "SIM113",  # Use enumerate instead of manually incrementing a counter
    # "VNE003",  # Variable names that shadow builtins are not allowed
    "W503",  # https://www.flake8rules.com/rules/W503.html
    "E800",  # Found commented out code
    "PIE781",  # You are assigning to a variable and then returning. Instead remove the assignment and return
]
exclude = [
    "static",
    "migrations",
    "frontend",
    ".git",
    "__pycache__",
]


[tool.isort]
profile = "google"
line_length = 160
include_trailing_comma = true
multi_line_output = 3
use_parentheses = true
extra_standard_library = ["pytest"]
known_django = ["django", "restframework"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "DJANGO", "FIRSTPARTY", "LOCALFOLDER"]


[tool.black]
exclude = '''
/(
  | migrations
)/
'''
line_length = 160


[tool.pytest.ini_options]
# DJANGO_SETTINGS_MODULE = "app.settings"
 python_files = ["test*.py"]
# addopts = ["--reuse-db"]
 markers = [
   "freeze_time: freezing time marker (pytest-freezegun does not register it)",
 ]
 filterwarnings = [  # Pattern: `action:message:category:module:line` (https://docs.python.org/3/library/warnings.html#describing-warning-filters)
   "ignore:.*'rest_framework_jwt.blacklist' defines default_app_config.*You can remove default_app_config.::django",
   "ignore:distutils Version classes are deprecated. Use packaging.version instead.:DeprecationWarning:pytest_freezegun:17",
 ]
 env = [
   "CI=1",
   "CELERY_ALWAYS_EAGER=True",
   "DISABLE_THROTTLING=True",
   "AXES_ENABLED=False",
   "REFRESH_TOKEN=test_refresh_token",
   "AZURE_TENANT_ID=test_tenant_id",
 ]
